
BROKER SCHEMA CommonExceptionLogging
DECLARE rc BOOLEAN;
DECLARE data CHARACTER;

DECLARE Config_File EXTERNAL CHARACTER 'E:\IBM_ACE\Projects\Dashen\LOG4J\Log4jConfigurationFile.xml';
CREATE COMPUTE MODULE ExceptionFlow_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		CALL initLog(Config_File) INTO rc;
		RETURN TRUE;
	END;

    
    CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE FlowName,ApplicationName,ExceptionNumber,ExceptionType,LabelName CHARACTER;
		DECLARE ErrorNumber INTEGER;
		DECLARE continueLoop BOOLEAN;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE outRef REFERENCE TO OutputRoot;
		SET continueLoop = TRUE;
		MOVE inRef TO InputExceptionList;
		WHILE continueLoop DO
			CASE

			WHEN CARDINALITY(inRef.RecoverableException[]) = 0 THEN
				SET continueLoop = FALSE;
			ELSE
				MOVE inRef TO inRef.RecoverableException[<];
			END CASE;

		END WHILE;


		CREATE LASTCHILD OF OutputRoot AS outRef DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC.ERROR AS outRef NAME 'ExceptionText';

		SET FlowName=SUBSTRING(inRef.Name BEFORE '#');
		SET LabelName=SUBSTRING(inRef.Label AFTER '.');
		SET ErrorNumber=inRef.[<].Number;
		CASE

		WHEN (LENGTH(inRef.[<].Text) = 0) THEN
			SET outRef.FlowName=FlowName;
			SET outRef.LabelName=LabelName;
			SET outRef.ErrorNumber=ErrorNumber;
			SET outRef.ApplicationName=ApplicationLabel;
			SET outRef.ExceptionType = FIELDNAME(inRef.[<]);
			SET outRef.ExceptionMessage=FIELDVALUE(inRef.[<].Text);

		ELSE SET outRef.FlowName=FlowName;
			SET outRef.LabelName=LabelName;
			SET outRef.ErrorNumber=ErrorNumber;
			SET outRef.ApplicationName=ApplicationLabel;
			SET outRef.ExceptionType = FIELDNAME(inRef.[<]);
			SET outRef.ExceptionMessage=FIELDVALUE(inRef.[<].Text);

		END CASE;		
		-------------------------------log4j------------------------------------------------------
		CALL writerToLogFile(MessageFlowLabel,'errordblogging_Log','DEBUG','========================== REQUEST ===============')INTO rc;


        SET data = CAST(ASBITSTREAM(InputRoot CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding)AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);


		CALL writerToLogFile(MessageFlowLabel,'errordblogging_Log','DEBUG',data) INTO rc;
		CALL writerToLogFile(MessageFlowLabel,'errordblogging_Log','DEBUG','=================== ENDINGGGGGGGGGGGGGGGGGGGGGG  ======================')INTO rc;


		CALL writerToLogFile(MessageFlowLabel,'errordblogging_Log','DEBUG','========================== RESPONCE ===============')INTO rc;
		DECLARE responce CHARACTER CAST(ASBITSTREAM(OutputRoot CCSID 1208) AS CHARACTER CCSID 1208);


		CALL writerToLogFile(MessageFlowLabel,'errordblogging_Log','DEBUG',responce) INTO rc;
		CALL errorlogging (FlowName,outRef.ApplicationName,LabelName,ErrorNumber,outRef.ExceptionType,outRef.ExceptionMessage);
	END;



	CREATE FUNCTION initLog(IN CONFIG_FILE_NAME CHARACTER) RETURNS BOOLEAN
	LANGUAGE JAVA
	EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.initLog4j";

	CREATE FUNCTION writerToLogFile (IN COMPONENT_NAME CHARACTER,IN LOGGER_NAME CHARACTER,IN LEVEL CHARACTER,IN TEXT CHARACTER ) RETURNS BOOLEAN
	LANGUAGE JAVA
	EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.log";		


	CREATE PROCEDURE errorlogging(IN FLOWNAME CHARACTER,IN APPLICATIONNAME CHARACTER ,IN LABELNAME CHARACTER,IN EXCEPTIONNUMBER INTEGER ,IN EXCEPTIONTYPE CHARACTER , IN EXCEPTIONMESSAGE CHARACTER )
	LANGUAGE DATABASE
	EXTERNAL NAME "errormessgelogging";

END MODULE;
