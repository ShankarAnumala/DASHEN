BROKER SCHEMA com.eidiko.Exec


CREATE COMPUTE MODULE ExceptionLog_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
	DECLARE TIMESTAMP_FORMAT CHARACTER 'yyyy-MM-dd''T''HH:mm:ss.SSSSSS';
		SET Environment.Variables.TraceFileExc.ExceptionDate = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT TIMESTAMP_FORMAT);
		DECLARE CRLF CHAR CAST(CAST('X''0D0A''' AS BLOB) AS CHAR CCSID 1208 );

		DECLARE brkrname CHARACTER BrokerName;
		DECLARE Execution_groupname CHARACTER ExecutionGroupLabel;
		DECLARE Applicationname CHARACTER ApplicationLabel;
		DECLARE ccsid INTEGER 1208;

		SET Environment.Variables.TraceFileExc.exceptionDesc = getExceptionDesc(InputRoot,OutputRoot,InputExceptionList);
		SET Environment.Variables.TraceFileExc.exceptionType = SUBSTRING(Environment.Variables.TraceFileExc.exceptionDesc BEFORE ':');
		SET Environment.Variables.TraceFileExc.Status = 'FAILURE';
		SET Environment.Variables.TraceFileExc.NodeName = SUBSTRING(InputExceptionList.Label AFTER '.');
		SET Environment.Variables.TraceFileExc.FlowName = SUBSTRING(InputExceptionList.Label BEFORE '.');
		SET Environment.Variables.TraceFileExc.BrokerName=BrokerName;
		SET Environment.Variables.TraceFileExc.ExecutionGroupLabel=ExecutionGroupLabel;
		SET Environment.Variables.TraceFileExc.ApplicationLabel=ApplicationLabel;		
		
	

		--create FIRSTCHILD of Environment.variable.DBLOGGING.Output1 DOMAIN ('JSON');
		--SET Environment.variable.DBLOGGING.Output1.JSON = OutputRoot.JSON;
		

        SET OutputRoot = NULL;
		CALL getFlowDetails(InputExceptionList);
		CALL originalMsg(ccsid,InputRoot);
		---------------------------------------------------------
		IF InputExceptionList IS NULL THEN
			SET Environment.Variables.TraceFileExc.originalMessage = '';
		END IF;
		---------------------------------------------------------


		IF Environment.Variables.TraceFileExc.exceptionType ='SocketTimeoutException' THEN
			SET Environment.Variables.TraceFileExc.ErrorCode='EIP1701E';
		ELSEIF Environment.Variables.TraceFileExc.exceptionType ='DatabaseException' THEN
			SET Environment.Variables.TraceFileExc.ErrorCode='BIP1702E';
		ELSEIF Environment.Variables.TraceFileExc.exceptionType ='RecoverableException' THEN
			SET Environment.Variables.TraceFileExc.ErrorCode='BIP1703E';
		ELSEIF Environment.Variables.TraceFileExc.exceptionType ='UserException' THEN
			SET Environment.Variables.TraceFileExc.ErrorCode='BIP1704E';
		ELSEIF Environment.Variables.TraceFileExc.exceptionType ='FatalException' THEN
			SET Environment.Variables.TraceFileExc.ErrorCode='BIP1705E';
		ELSEIF Environment.Variables.TraceFileExc.exceptionType ='ConfigurationException' THEN
			SET Environment.Variables.TraceFileExc.ErrorCode='BIP1706E';
		ELSEIF Environment.Variables.TraceFileExc.exceptionType ='ConversionException' THEN
			SET Environment.Variables.TraceFileExc.ErrorCode='BIP1707E';
		ELSEIF Environment.Variables.TraceFileExc.exceptionType ='SocketException' THEN
			SET Environment.Variables.TraceFileExc.ErrorCode='BIP1708E';
		ELSEIF Environment.Variables.TraceFileExc.exceptionType ='CastException' THEN
			SET Environment.Variables.TraceFileExc.ErrorCode='BIP1709E';
		ELSEIF Environment.Variables.TraceFileExc.exceptionType ='MessageException' THEN
			SET Environment.Variables.TraceFileExc.ErrorCode='BIP1710E';
		ELSEIF Environment.Variables.TraceFileExc.exceptionType ='ParserException' THEN
			SET Environment.Variables.TraceFileExc.ErrorCode='BIP1711E';
		ELSEIF Environment.Variables.TraceFileExc.exceptionType ='SecurityException' THEN
			SET Environment.Variables.TraceFileExc.ErrorCode='BIP1712E';
		ELSEIF Environment.Variables.TraceFileExc.exceptionType ='SqlException' THEN
			SET Environment.Variables.TraceFileExc.ErrorCode='BIP1713E';
		ELSEIF Environment.Variables.TraceFileExc.exceptionType ='UnknownException' THEN
			SET Environment.Variables.TraceFileExc.ErrorCode='BIP1714E';

		ELSE
			SET Environment.Variables.TraceFileExc.ErrorCode ='BIP01ERR';
			SET Environment.Variables.TraceFileExc.Reason ='Technical Failure';
			DECLARE errorMsg CHARACTER CAST(InputRoot.BLOB.BLOB AS CHAR CCSID 1208);
			SET Environment.Variables.TraceFileExc.exceptionDesc = REPLACE(errorMsg,CRLF,'');
		END IF;

		DECLARE ERRORDESC CHARACTER ''||COALESCE(Environment.Variables.TraceFileExc.exceptionDesc,'');
		--DECLARE CRLF CHAR CAST(CAST('X''0D0A''' AS BLOB) AS CHAR CCSID 1208 );
		DECLARE tempERRORDESC CHARACTER;

		IF CONTAINS(ERRORDESC, 'WebService Request Exception')THEN
			SET tempERRORDESC = SUBSTRING(ERRORDESC BEFORE 'WebService Request Exception')||'WebService Request Exception';
			SET ERRORDESC = REPLACE(''||COALESCE(tempERRORDESC||' '||SUBSTRING(ERRORDESC AFTER 'POST')||SUBSTRING(ERRORDESC AFTER 'GET')||SUBSTRING(ERRORDESC AFTER 'DELETE')||SUBSTRING(ERRORDESC AFTER 'PUT')||SUBSTRING(ERRORDESC AFTER 'HEAD'),''),CRLF,'');
		END IF;
		SET Environment.Variables.TraceFileExc.exceptionDesc = ERRORDESC;
		-- ===================================
		-- DBLogging
		-- ===================================		


		SET OutputRoot.XMLNSC.DBLogging.RequestUUID = COALESCE(Environment.variable.Header.RequestUUID,InputRoot.JSON.Data.Dashen_API_REQUEST.HEADER.REQUESTUUID);
		SET OutputRoot.XMLNSC.DBLogging.ServiceRequestId = Environment.variable.Header.ServiceRequestId;

		SET OutputRoot.XMLNSC.DBLogging.CreatedBy = 'DASHEN_API';

		SET OutputRoot.XMLNSC.DBLogging.PayloadReqest = CAST(ASBITSTREAM(Environment.variable.DBLOGGING.Input1.JSON) AS CHARACTER ENCODING 1208);
		--SET OutputRoot.XMLNSC.DBLogging.PayloadReqestTp = CAST(ASBITSTREAM(Environment.variable.DBLOGGING.Input1.SOAP) AS CHARACTER ENCODING 1208);

		SET OutputRoot.XMLNSC.DBLogging.PayloadResponse = CAST(ASBITSTREAM(Environment.variable.DBLOGGING.Output1.JSON) AS CHARACTER ENCODING 1208);
		--SET OutputRoot.XMLNSC.DBLogging.PayloadResponseTp = CAST(ASBITSTREAM(Environment.variable.DBLOGGING.Output1.SOAP) AS CHARACTER ENCODING 1208);

		SET OutputRoot.XMLNSC.DBLogging.serviceName = COALESCE(Environment.variable.DBLOGGING.SERVICE_NAME,'DASHEN_API');
		SET OutputRoot.XMLNSC.DBLogging.ChannelID = COALESCE(Environment.variable.Header.ChannelID,InputRoot.JSON.Data.Dashen_API_REQUEST.HEADER.CHANNELID);
		SET OutputRoot.XMLNSC.DBLogging.AccountNumber = '';
		SET OutputRoot.XMLNSC.DBLogging.ucicNo = '';
		SET OutputRoot.XMLNSC.DBLogging.cardNo = '';
		SET OutputRoot.XMLNSC.DBLogging.UnqSeqNo = '';
		SET OutputRoot.XMLNSC.DBLogging.ResponseMsgTime = CURRENT_TIMESTAMP ;
		SET OutputRoot.XMLNSC.DBLogging.RequestMsgTime = Environment.variable.DBLOGGING.RequestMsgTime;

		SET OutputRoot.XMLNSC.DBLogging.LocalIpAddress = Environment.variable.DBLOGGING.LocalIpAddress;

		SET OutputRoot.XMLNSC.DBLogging.Status = Environment.Variables.TraceFileExc.Status;

		SET OutputRoot.XMLNSC.DBLogging.ErrorCode = Environment.Variables.TraceFileExc.ErrorCode;
		SET OutputRoot.XMLNSC.DBLogging.ErrorDesc = Environment.Variables.TraceFileExc.exceptionDesc;
		--SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ;
		--------------------------------------------------------------------------------------------------------------		


		RETURN TRUE;
	END;
	CREATE PROCEDURE originalMsg (IN ccsid INTEGER, IN InputRoot REFERENCE)
	BEGIN
		--If error occurs capture the original message
		DECLARE domainFldName CHARACTER FIELDNAME(InputBody);
		IF domainFldName = 'MRM' THEN
			SET Environment.Variables.TraceFileExc.originalMessage = InputRoot.MRM;
		ELSEIF domainFldName = 'XMLNSC' THEN
			SET Environment.Variables.TraceFileExc.originalMessage = CAST(ASBITSTREAM(InputRoot.XMLNSC CCSID ccsid) AS CHARACTER CCSID ccsid);
			SET OutputRoot.XMLNSC=Environment.XMLNSC;
		ELSEIF domainFldName = 'SOAP' THEN
			SET Environment.Variables.TraceFileExc.originalMessage = CAST(ASBITSTREAM(InputRoot.SOAP CCSID ccsid) AS CHARACTER CCSID ccsid);
		ELSEIF domainFldName = 'BLOB' THEN
			SET Environment.Variables.TraceFileExc.originalMessage = CAST(ASBITSTREAM(InputRoot.BLOB CCSID ccsid) AS CHARACTER CCSID ccsid);
			DECLARE inMsg BLOB CAST(InputRoot.BLOB.BLOB AS BLOB CCSID 1208);
			CREATE LASTCHILD OF Environment DOMAIN('XMLNSC') PARSE(inMsg,546,1208);


			DECLARE data CHARACTER;
			SET data = Environment.Variables.TraceFileExc.exceptionDesc;
		END IF;
	END;

	CREATE PROCEDURE getFlowDetails(IN InputExceptionList REFERENCE)
	BEGIN
		--Taking messge flow details
		--Taking message flow name , node name


		DECLARE nodeName CHARACTER;
		DECLARE label CHARACTER;
		DECLARE flowName, flowNameone,flowNametwo CHARACTER;
		DECLARE fieldPosition INTEGER;
		DECLARE excListRef REFERENCE TO InputExceptionList.*[1];
		SET label = excListRef.Label;
		SET flowNameone = excListRef.Name;
		SET fieldPosition = POSITION('.' IN label);
		SET flowNametwo=SUBSTRING(flowNameone AFTER '.');
		IF flowNametwo='' THEN
			SET flowName=SUBSTRING(flowNameone BEFORE '#');
		ELSE
			SET flowName=SUBSTRING(flowNametwo BEFORE '#');
		END IF;
		SET nodeName=SUBSTRING(label FROM (fieldPosition+1));
		SET Environment.variables.TraceFileExc.FlowName=flowName;
		SET Environment.variables.TraceFileExc.NodeName=nodeName;
	END;

	CREATE PROCEDURE getExceptionDesc (in inputroot REFERENCE,in outputroot REFERENCE, IN InputExceptionList REFERENCE)
	RETURNS CHARACTER
	BEGIN
		--Copy the exception description
		DECLARE continueLoop BOOLEAN TRUE;
		DECLARE exceptionData CHAR;
		DECLARE messageText CHARACTER '';
		DECLARE inRef2 REFERENCE TO InputExceptionList.*[1];
		DECLARE insertRef REFERENCE TO InputExceptionList.*[1];
		DECLARE exceptionName CHARACTER;
		SET continueLoop = TRUE;
		MOVE inRef2 TO InputExceptionList;
		IF CARDINALITY(inRef2.RecoverableException[]) = 0 THEN
			SET continueLoop = FALSE;
		END IF;
		SET inRef2 = InputExceptionList.*[1];
		WHILE lastmove(inRef2) AND continueLoop DO
			IF inRef2.Number is not null THEN
				SET exceptionName = FIELDNAME(inRef2);
				IF stringValidation(inRef2.Text) THEN
					SET messageText = messageText||' '||inRef2.Text;
				END IF;
				MOVE insertRef TO inRef2.Insert[>];
				WHILE LASTMOVE(insertRef) AND FIELDNAME(insertRef) = 'Insert' DO --- fetch description from Insert[]
					IF NOT LENGTH(insertRef.Text) = 1 AND
						stringValidation(insertRef.Text)THEN
						SET messageText = messageText||' '||insertRef.Text;
					END IF;
					MOVE insertRef NEXTSIBLING;
				END WHILE;
			END IF;
			MOVE inRef2 LASTCHILD;
		END WHILE;
		SET exceptionData = exceptionName||':'||messageText;
		RETURN exceptionData;
	END;
	/*
	* Removing not useful strings from Excepiton Description
	*/

	CREATE PROCEDURE stringValidation (IN text CHARACTER)
	RETURNS BOOLEAN
	BEGIN
		IF NOT CONTAINS(text, 'Node throwing exception') AND
			NOT CONTAINS(text, 'Caught exception and rethrowing') AND
			NOT CONTAINS(text, 'Error detected, rethrowing') AND
			NOT CONTAINS(text, 'Error occured in procedure') AND
			NOT LENGTH(text) = 1 THEN

			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;
END MODULE;